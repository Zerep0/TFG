/**
 * This is an automatically generated file
 * @name Hello world
 * @kind problem
 * @problem.severity warning
 * @id java/example/hello-world
 */

import java


// Search queries into annotations @NamedQuery

/*from Class c, Annotation a, Expr queryValue
where c.getAnAnnotation() = a 
  and a.getType().hasQualifiedName("jakarta.persistence", "NamedQuery")
  and queryValue = a.getValue("query")
select c, "Query: " + queryValue.toString()*/

// Search queries into annotations @NamedQuery in use

/*from Annotation nq, Annotation q
where nq.getType().hasQualifiedName("jakarta.persistence", "NamedQuery") 
  and q.getType().hasQualifiedName("org.springframework.data.jpa.repository", "Query") 
  and nq.getValue("name").toString() = q.getValue("name").toString()
select q, nq.getValue("query").toString()*/


// Buscar m√©todos anotados con @Query

/*from Annotation a
where a.getType().hasQualifiedName("org.springframework.data.jpa.repository", "Query")
select a, "Advertence"*/


// Search the method findAll of ListCrudRepository

/*from MethodCall call, ParameterizedType pt
where call.getMethod().getName() = "findAll"
  and pt = call.getMethod().getDeclaringType().(ParameterizedType)
  //and pt.getTypeArgument(0).getName() = "Post"
select call, pt.getTypeArgument(0).getName()*/

// Search if the parent class has the annotation @Inheritance(strategy = InheritanceType.JOINED)

/*from Class child, Class parent, Annotation a
where parent = child.getASupertype().(Class)
  and a = parent.getAnAnnotation() and a.getType().hasQualifiedName("jakarta.persistence", "Inheritance")
  and a.getValue("strategy").toString() = "InheritanceType.JOINED"
select child, "Parent: " + parent.getName()*/

/*from Class child, Class parent, Annotation inheritanceAnn, Annotation namedQuery, Annotation query
where child.hasName("VideoPost") and parent = child.getASupertype().(Class)
  and inheritanceAnn = parent.getAnAnnotation()
  and inheritanceAnn.getType().hasQualifiedName("jakarta.persistence", "Inheritance")
  and inheritanceAnn.getValue("strategy").toString() = "InheritanceType.JOINED"

  and query.getType().hasQualifiedName("org.springframework.data.jpa.repository", "Query") 
  and query.getValue("name").toString() = namedQuery.getValue("name").toString() 

  and namedQuery.getType().hasQualifiedName("jakarta.persistence", "NamedQuery")
  and namedQuery.getValue("query").toString().toLowerCase().regexpMatch("\\\"select [a-zA-Z_][a-zA-Z_.]* from " + parent.getName().toLowerCase() + ".*")
  
select query, namedQuery.getValue("query").toString()*/

/*from Class child, Class parent, Annotation inheritanceAnn, Annotation query
where child.hasName("VideoPost") and parent = child.getASupertype().(Class)
  and inheritanceAnn = parent.getAnAnnotation()
  and inheritanceAnn.getType().hasQualifiedName("jakarta.persistence", "Inheritance")
  and inheritanceAnn.getValue("strategy").toString() = "InheritanceType.JOINED"

  and query.getType().hasQualifiedName("org.springframework.data.jpa.repository", "Query") 
  and query.getValue("value").toString().toLowerCase().regexpMatch("\\\"select [a-zA-Z_][a-zA-Z_.]* from " + parent.getName().toLowerCase() + ".*")
  
select query, query.getValue("value").toString()*/

from Class child, Class parent, Annotation inheritanceAnn, Annotation namedQuery, Annotation query, Method m, MethodCall mc
where 
  // Check if the child class is VideoPost and the parent class has the annotation @Inheritance(strategy = InheritanceType.JOINED)
  child.hasName("VideoPost") and parent = child.getASupertype().(Class)
  and inheritanceAnn = parent.getAnAnnotation()
  and inheritanceAnn.getType().hasQualifiedName("jakarta.persistence", "Inheritance")
  and inheritanceAnn.getValue("strategy").toString() = "InheritanceType.JOINED"

  // Condition to find the query
  and (
      // NameQuery
      (query.getType().hasQualifiedName("org.springframework.data.jpa.repository", "Query") 
      and query.getValue("name").toString() = namedQuery.getValue("name").toString() 
      and namedQuery.getType().hasQualifiedName("jakarta.persistence", "NamedQuery")
      and namedQuery.getValue("query").toString().toLowerCase().regexpMatch("\\\"select [a-zA-Z_][a-zA-Z_.]* from " + parent.getName().toLowerCase() + ".*")
      and m = query.getTarget() and mc.getMethod() = m) 
     
      // Query
      or
      (query.getType().hasQualifiedName("org.springframework.data.jpa.repository", "Query") 
      and query.getValue("value").toString().toLowerCase().regexpMatch("\\\"select [a-zA-Z_][a-zA-Z_.]* from " + parent.getName().toLowerCase() + ".*")
      and m = query.getTarget() and mc.getMethod() = m) 
  )
  
select mc, "Advertisement calls"