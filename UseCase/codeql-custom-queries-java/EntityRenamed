/**
 * @id java/orion/entity-renamed
 * @name Deleted Entity 
 * @kind problem
 * @description Detects when an jpql query uses a entity that has been renamed.
 * @problem.severity error
 */

 import java
 import utils
 import semmle.code.java.dataflow.TaintTracking
 
 predicate usesEntity(Expr queryValue, Class parent) {
   queryValue.toString().regexpMatch(
     "(?i).*\\b(FROM|UPDATE|DELETE\\s+FROM)\\s+" + parent.getName() + "\\b.*"
   )
   or
   queryValue.toString().regexpMatch(
     "(?i).*\\bJOIN\\s+(?:FETCH\\s+)?" + parent.getName() + "\\b.*"
   )
 }
 
 module JPQLFlowConfiguration implements DataFlow::ConfigSig {
   
   predicate isSource(DataFlow::Node source) {
    exists(StringLiteral str |
      source.asExpr() = str 
    )
  }
 
  predicate isSink(DataFlow::Node sink) {
    exists(MethodCall mc |
      mc.getMethod().getDeclaringType().hasQualifiedName("jakarta.persistence", "EntityManager")
      and mc.getMethod().getName() = "createQuery" and
      sink.asExpr() = mc.getArgument(0)
    )
  }
 }
 
 module JPQLFlow = TaintTracking::Global<JPQLFlowConfiguration>;
 
 from Class entity, Annotation nq, Annotation q, Method m, MethodCall mc, DataFlow::Node source, DataFlow::Node sink
 where 
 
     entity.hasName("Posting") 
     
     and
       (
         // Search namedQuery actives
         (isQuery(q) and isNamedQuery(nq) and isEqual(nq.getValue("name"), q.getValue("name"))
         and usesEntity(nq.getValue("query"), entity)
         and m = q.getTarget() and mc.getMethod() = m) 
 
         or 
         // Search queries
         (isQuery(q) and usesEntity(q.getValue("value"), entity)
         and m = q.getTarget() and mc.getMethod() = m)
 
         or
         // Search createQuery
         (mc.getMethod() = m
         and m.getDeclaringType().hasQualifiedName("jakarta.persistence", "EntityManager")
         and m.getName() = "createQuery"
         and (
           // CreateQuery: One Parameter (jpql) and Two parameters (typed)
           (JPQLFlow::flow(source, sink) and usesEntity(source.asExpr(), entity) and sink.asExpr() = mc.getArgument(0))
         ))
 
         or 
         // Search createNamedQuery
         (mc.getMethod() = m
         and m.getDeclaringType().hasQualifiedName("jakarta.persistence", "EntityManager")
         and m.getName() = "createNamedQuery"
         and isEqual(mc.getArgument(0), q.getValue("name"))
         and usesEntity(q.getValue("query"), entity))
       )
 select mc,  "Entity " + entity.getName() + " has been renamed to '${newEntityName}', but it is still being referenced with the old name in JPQL queries."
 
 